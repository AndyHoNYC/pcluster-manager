Parameters:
  AdminUserEmail:
    Description: Email address of administrative user setup by default.
    Type: String
    Default: user@amazon.com
  PublicEcrImageUri:
    Description: When specified, the URI of the Docker image for the Lambda of the PclusterManager container
    Type: String
    Default: public.ecr.aws/n0x0o5k1/pcluster-manager-awslambda:latest
  EnableAuth:
    Description: When set to false, any user will be able to view and manage clusters.
    Type: String
    Default: true
  Version:
    Description: Version of AWS ParallelCluster to deploy
    Type: String
    Default: 3.0.2

Mappings:
  PclusterManager:
    Constants:
      Version: 3.0.2
      ShortVersion: 3.0.2

Resources:

  PclusterManagerCognito:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        AdminUserEmail: !Ref AdminUserEmail
        LogoutURL: !Sub
         - https://${Api}.execute-api.${AWS::Region}.${AWS::URLSuffix}/index.html
         - Api: !Ref ApiGateway
        CallbackURL: !Sub
         - https://${Api}.execute-api.${AWS::Region}.${AWS::URLSuffix}/login
         - Api: !Ref ApiGateway
      TemplateURL: !Sub https://pcluster-manager-${AWS::Region}.s3.${AWS::Region}.amazonaws.com/pcluster-manager-cognito.yaml
      TimeoutInMinutes: 10

  ParallelClusterApi:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        ApiDefinitionS3Uri: s3://pcluster-manager-stacks-001/api/ParallelCluster.openapi.yaml
        CreateApiUserRole: False
        EnableIamAdminAccess: True
        PublicEcrImageUri: !Sub public.ecr.aws/parallelcluster/pcluster-api:${Version}
      TemplateURL: !Sub https://${AWS::Region}-aws-parallelcluster.s3.${AWS::Region}.amazonaws.com/parallelcluster/${Version}/api/parallelcluster-api.yaml
      TimeoutInMinutes: 30

  PclusterManagerEcr:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        PublicEcrImageUri: !Ref PublicEcrImageUri
      TemplateURL: !Sub https://pcluster-manager-${AWS::Region}.s3.${AWS::Region}.amazonaws.com/pcluster-manager-ecr.yaml
      TimeoutInMinutes: 10

  SSMDefaultUser:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub https://pcluster-manager-${AWS::Region}.s3.${AWS::Region}.amazonaws.com/SSMSessionProfile-cfn.yaml
      TimeoutInMinutes: 30

  PclusterManagerFunction:
    Type: AWS::Lambda::Function
    Properties:
      Role: !GetAtt PclusterManagerUserRole.Arn
      PackageType: Image
      MemorySize: 512
      Timeout: 30
      TracingConfig:
        Mode: Active
      Environment:
        Variables:
          API_BASE_URL: !GetAtt [ ParallelClusterApi, Outputs.ParallelClusterApiInvokeUrl ]
          SITE_URL: !Sub
           - https://${Api}.execute-api.${AWS::Region}.${AWS::URLSuffix}
           - Api: !Ref ApiGateway
          AUTH_PATH: !GetAtt [ PclusterManagerCognito, Outputs.UserPoolAuthDomain ]
          SECRET_ID: !GetAtt [ PclusterManagerCognito, Outputs.UserPoolClientSecretName ]
          ENABLE_AUTH: !Ref EnableAuth
      FunctionName: !Sub
        - PclusterManagerFunction-${StackIdSuffix}
        - { StackIdSuffix: !Select [2, !Split ['/', !Ref 'AWS::StackId']] }
      Code:
        ImageUri: !Sub
          - ${AWS::AccountId}.dkr.ecr.${AWS::Region}.${AWS::URLSuffix}/${Repository}:${Version}
          - Repository: !GetAtt [ PclusterManagerEcr, Outputs.PrivateEcrRepository ]
            Version: latest
              # !Join
              # - '-'
              # - [!Select [2, !Split ['/', !Ref EcrImage]], !Select [3, !Split ['/', !Ref EcrImage]]]

  ApiGateway:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: PclusterManager
      Description: PclusterManager Lambda Proxy
      ProtocolType: HTTP
      Target: !Sub
        - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:PclusterManagerFunction-${StackIdSuffix}/invocations
        - { StackIdSuffix: !Select [2, !Split ['/', !Ref 'AWS::StackId']] }

  ApiGatewayRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGateway
      OperationName: ANY
      RouteKey: 'ANY /'
      Target: !Sub
        - 'integrations/${IntegrationId}'
        - { IntegrationId: !Ref ApiGatewayIntegration }

  ApiGatewayIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ApiGateway
      Description: 'ANY integration'
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub
        - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:PclusterManagerFunction-${StackIdSuffix}/invocations
        - { StackIdSuffix: !Select [2, !Split ['/', !Ref 'AWS::StackId']] }
      PayloadFormatVersion: 2.0
      TimeoutInMillis: 30000

  PclusterManagerLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${PclusterManagerFunction}
      RetentionInDays: 90

  # Roles

  PclusterManagerUserRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: lambda.amazonaws.com
      ManagedPolicyArns:
        # Required for Lambda logging and XRay
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AWSXRayDaemonWriteAccess
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        # Access to the ParllelCluster API
        - !Ref ParallelClusterApiGatewayInvoke
        # Required to run PclusterManager functionalities
        - !Ref PclusterManagerCognitoPolicy
        - !Ref PclusterManagerEC2Policy
        - !Ref PclusterManagerFsxLustrePolicy
        - !Ref PclusterManagerEfsPolicy
        - !Ref PclusterManagerSsmSendPolicy
        - !Ref PclusterManagerSsmGetCommandInvocationPolicy
        - !Ref PclusterManagerCognitoSecretPolicy

  # Policies

  PclusterManagerApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt PclusterManagerFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub
        - arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*
        - { ApiGateway: !Ref ApiGateway }

  ParallelClusterApiGatewayInvoke:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - execute-api:Invoke
            Effect: Allow
            Resource: !Sub
              - arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${PCApiGateway}/*/*
              - { PCApiGateway: !Select [2, !Split ['/', !Select [0, !Split ['.', !GetAtt [ ParallelClusterApi, Outputs.ParallelClusterApiInvokeUrl ]]]]] }

  PclusterManagerCognitoPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
            - cognito-idp:AdminRemoveUserFromGroup
            - cognito-idp:AdminAddUserToGroup
            - cognito-idp:AdminListGroupsForUser
            - cognito-idp:ListUsers
            Resource: !Sub
              - arn:${AWS::Partition}:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPoolId}
              - { UserPoolId: !GetAtt [ PclusterManagerCognito, Outputs.UserPoolId ]}
            Effect: Allow
            Sid: CognitoPolicy

  PclusterManagerEC2Policy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
            - ec2:DescribeVpcs
            - ec2:DescribeInstanceTypes
            - ec2:DescribeSubnets
            - ec2:DescribeKeyPairs
            Resource:
              - '*'
            Effect: Allow
            Sid: EC2Policy

  PclusterManagerFsxLustrePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
            - fsx:DescribeFileSystems
            Resource:
            - '*'
            Effect: Allow
            Sid: FsxLustrePolicy

  PclusterManagerEfsPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
            - elasticfilesystem:DescribeFileSystems
            Resource:
              - !Sub arn:${AWS::Partition}:elasticfilesystem:*:${AWS::AccountId}:file-system/*
            Effect: Allow
            Sid: EfsPolicy

  PclusterManagerSsmSendPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
            - ssm:SendCommand
            Resource:
              - !Sub arn:${AWS::Partition}:ec2:*:${AWS::AccountId}:instance/*
            Effect: Allow
            Sid: SsmSendPolicyInstance
            Condition:
              StringLike:
                ssm:resourceTag/parallelcluster:version: "*"
          - Action:
            - ssm:SendCommand
            Resource:
              - !Sub arn:${AWS::Partition}:ssm:*::document/AWS-RunShellScript
            Effect: Allow
            Sid: SsmSendPolicyCommand

  PclusterManagerSsmGetCommandInvocationPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
            - ssm:GetCommandInvocation
            Resource:
              - '*'
            Effect: Allow
            Sid: SsmGetCommandInvocationPolicy


  PclusterManagerCognitoSecretPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
            - secretsmanager:GetSecretValue
            Resource:
              - !GetAtt [ PclusterManagerCognito, Outputs.UserPoolClientSecretArn ]
            Effect: Allow
            Sid: SecretsRole

# Outputs

Outputs:
  PclusterManagerLambdaArn:
    Description: 'ARN of the PclusterManager Lambda function'
    Value: !GetAtt PclusterManagerFunction.Arn
  PclusterManagerUrl:
    Description: 'Url to reach the PclusterManager Site.'
    Export:
      Name: !Sub ${AWS::StackName}-PclusterManagerSite
    Value: !Sub
      - https://${Api}.execute-api.${AWS::Region}.${AWS::URLSuffix}
      - Api: !Ref ApiGateway
